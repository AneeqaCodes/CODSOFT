#Task #3
#Sales Prediction using Python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

data = pd.read_csv('advertising.csv')

ad= data.dropna()
ad.head(10)
import matplotlib.pyplot as plt

# Use separate columns for x-axis and a single label for the x-axis
plt.scatter(ad['TV'], ad['Sales'], label='TV')
plt.scatter(ad['Radio'], ad['Sales'], label='Radio')
plt.scatter(ad['Newspaper'], ad['Sales'], label='Newspaper')

plt.xlabel('TV, Radio, Newspaper')
plt.ylabel('Sales')
plt.legend()  # Add a legend to differentiate data points
plt.show()

X = data[['TV','Radio','Newspaper']]  # Input feature
y = data['Sales']  # Target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#check correlation of each feature
sns.heatmap(ad.corr(), cmap="Greens", annot = True)
plt.show()

#Model Selection
model = LinearRegression()

#Model Training
model.fit(X_train, y_train)

# Model Evaluation
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'R-squared (R2): {r2}')
# Input data
new_advertising_data = {
    'TV': 500,
    'Radio': 600,
    'Newspaper': 700,
}

#which feature has the highest correlation with sales
correlation_tv = data['TV'].corr(data['Sales'])
correlation_radio = data['Radio'].corr(data['Sales'])
correlation_newspaper = data['Newspaper'].corr(data['Sales'])

correlation_dict = {
    'TV': abs(correlation_tv),
    'Radio': abs(correlation_radio),
    'Newspaper': abs(correlation_newspaper)
}

most_correlated_feature = max(correlation_dict, key=correlation_dict.get)

# Create an array with all three features
input_data = np.array([[new_advertising_data['TV'], new_advertising_data['Radio'], new_advertising_data['Newspaper']]])

# Predict sales using the features
predicted_sales = model.predict(input_data)

print(f'Most Related Feature: {most_correlated_feature}')
print(f'Predicted Sales: {predicted_sales[0]}')





